/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ProcessLog as PrismaProcessLog } from "@prisma/client";

export class ProcessLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcessLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.processLog.count(args);
  }

  async processLogs(
    args: Prisma.ProcessLogFindManyArgs
  ): Promise<PrismaProcessLog[]> {
    return this.prisma.processLog.findMany(args);
  }
  async processLog(
    args: Prisma.ProcessLogFindUniqueArgs
  ): Promise<PrismaProcessLog | null> {
    return this.prisma.processLog.findUnique(args);
  }
  async createProcessLog(
    args: Prisma.ProcessLogCreateArgs
  ): Promise<PrismaProcessLog> {
    return this.prisma.processLog.create(args);
  }
  async updateProcessLog(
    args: Prisma.ProcessLogUpdateArgs
  ): Promise<PrismaProcessLog> {
    return this.prisma.processLog.update(args);
  }
  async deleteProcessLog(
    args: Prisma.ProcessLogDeleteArgs
  ): Promise<PrismaProcessLog> {
    return this.prisma.processLog.delete(args);
  }
}
