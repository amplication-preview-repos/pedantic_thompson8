/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProcessLogService } from "../processLog.service";
import { ProcessLogCreateInput } from "./ProcessLogCreateInput";
import { ProcessLog } from "./ProcessLog";
import { ProcessLogFindManyArgs } from "./ProcessLogFindManyArgs";
import { ProcessLogWhereUniqueInput } from "./ProcessLogWhereUniqueInput";
import { ProcessLogUpdateInput } from "./ProcessLogUpdateInput";

export class ProcessLogControllerBase {
  constructor(protected readonly service: ProcessLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProcessLog })
  async createProcessLog(
    @common.Body() data: ProcessLogCreateInput
  ): Promise<ProcessLog> {
    return await this.service.createProcessLog({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProcessLog] })
  @ApiNestedQuery(ProcessLogFindManyArgs)
  async processLogs(@common.Req() request: Request): Promise<ProcessLog[]> {
    const args = plainToClass(ProcessLogFindManyArgs, request.query);
    return this.service.processLogs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProcessLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async processLog(
    @common.Param() params: ProcessLogWhereUniqueInput
  ): Promise<ProcessLog | null> {
    const result = await this.service.processLog({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProcessLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProcessLog(
    @common.Param() params: ProcessLogWhereUniqueInput,
    @common.Body() data: ProcessLogUpdateInput
  ): Promise<ProcessLog | null> {
    try {
      return await this.service.updateProcessLog({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProcessLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProcessLog(
    @common.Param() params: ProcessLogWhereUniqueInput
  ): Promise<ProcessLog | null> {
    try {
      return await this.service.deleteProcessLog({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
