/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProcessLog } from "./ProcessLog";
import { ProcessLogCountArgs } from "./ProcessLogCountArgs";
import { ProcessLogFindManyArgs } from "./ProcessLogFindManyArgs";
import { ProcessLogFindUniqueArgs } from "./ProcessLogFindUniqueArgs";
import { DeleteProcessLogArgs } from "./DeleteProcessLogArgs";
import { ProcessLogService } from "../processLog.service";
@graphql.Resolver(() => ProcessLog)
export class ProcessLogResolverBase {
  constructor(protected readonly service: ProcessLogService) {}

  async _processLogsMeta(
    @graphql.Args() args: ProcessLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProcessLog])
  async processLogs(
    @graphql.Args() args: ProcessLogFindManyArgs
  ): Promise<ProcessLog[]> {
    return this.service.processLogs(args);
  }

  @graphql.Query(() => ProcessLog, { nullable: true })
  async processLog(
    @graphql.Args() args: ProcessLogFindUniqueArgs
  ): Promise<ProcessLog | null> {
    const result = await this.service.processLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProcessLog)
  async deleteProcessLog(
    @graphql.Args() args: DeleteProcessLogArgs
  ): Promise<ProcessLog | null> {
    try {
      return await this.service.deleteProcessLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
