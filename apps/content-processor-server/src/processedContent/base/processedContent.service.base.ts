/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProcessedContent as PrismaProcessedContent,
} from "@prisma/client";

export class ProcessedContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcessedContentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.processedContent.count(args);
  }

  async processedContents(
    args: Prisma.ProcessedContentFindManyArgs
  ): Promise<PrismaProcessedContent[]> {
    return this.prisma.processedContent.findMany(args);
  }
  async processedContent(
    args: Prisma.ProcessedContentFindUniqueArgs
  ): Promise<PrismaProcessedContent | null> {
    return this.prisma.processedContent.findUnique(args);
  }
  async createProcessedContent(
    args: Prisma.ProcessedContentCreateArgs
  ): Promise<PrismaProcessedContent> {
    return this.prisma.processedContent.create(args);
  }
  async updateProcessedContent(
    args: Prisma.ProcessedContentUpdateArgs
  ): Promise<PrismaProcessedContent> {
    return this.prisma.processedContent.update(args);
  }
  async deleteProcessedContent(
    args: Prisma.ProcessedContentDeleteArgs
  ): Promise<PrismaProcessedContent> {
    return this.prisma.processedContent.delete(args);
  }
}
