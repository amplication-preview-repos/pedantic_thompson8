/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProcessedContentService } from "../processedContent.service";
import { ProcessedContentCreateInput } from "./ProcessedContentCreateInput";
import { ProcessedContent } from "./ProcessedContent";
import { ProcessedContentFindManyArgs } from "./ProcessedContentFindManyArgs";
import { ProcessedContentWhereUniqueInput } from "./ProcessedContentWhereUniqueInput";
import { ProcessedContentUpdateInput } from "./ProcessedContentUpdateInput";

export class ProcessedContentControllerBase {
  constructor(protected readonly service: ProcessedContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProcessedContent })
  async createProcessedContent(
    @common.Body() data: ProcessedContentCreateInput
  ): Promise<ProcessedContent> {
    return await this.service.createProcessedContent({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProcessedContent] })
  @ApiNestedQuery(ProcessedContentFindManyArgs)
  async processedContents(
    @common.Req() request: Request
  ): Promise<ProcessedContent[]> {
    const args = plainToClass(ProcessedContentFindManyArgs, request.query);
    return this.service.processedContents({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProcessedContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async processedContent(
    @common.Param() params: ProcessedContentWhereUniqueInput
  ): Promise<ProcessedContent | null> {
    const result = await this.service.processedContent({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProcessedContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProcessedContent(
    @common.Param() params: ProcessedContentWhereUniqueInput,
    @common.Body() data: ProcessedContentUpdateInput
  ): Promise<ProcessedContent | null> {
    try {
      return await this.service.updateProcessedContent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProcessedContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProcessedContent(
    @common.Param() params: ProcessedContentWhereUniqueInput
  ): Promise<ProcessedContent | null> {
    try {
      return await this.service.deleteProcessedContent({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
